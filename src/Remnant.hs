-- {-# LANGUAGE NamedFieldPuns #-}

module Remnant where

import Cuboid (Source(..), Target(..))
import Segment ( AxisResult(..)
               , AdjLeft(..)
               , AdjRight(..)
               , Overlap(..)
               , Segment(..)
               , SrcSeg(..)
               , TrgSeg(..)
               , compareSegments
               )

{- | A `Cuboid` list of non-intersecting cuboids
   | generated by recursively recursively performing a `RebootStep`
   | upon all the cuboids.
-}
type Remnant = [ Target ]

type AxisResults = [AxisResult]

mkAxisResults :: Source -> Target -> AxisResults
mkAxisResults (Source ss) (Target ts) = zipWith compareSegments ss ts

emptyRemnant :: Remnant
emptyRemnant = []

reduceRemnantUsingSource :: Remnant -> Source -> Remnant
reduceRemnantUsingSource previousRemnant source =
   foldl prepareReduce emptyRemnant previousRemnant -- NOTE: each Source starts a new remnant
   where
      prepareReduce :: Remnant -> Target -> Remnant
      prepareReduce targetRemnant target =
         reduce targetRemnant source target

{- | If there are any adjacent targets resulting from reducing
   | the current target from the source, then add them to the
   | remnant
   |
   | Properties:
   |
   | 1. The combined volumes of the remnant == 2nd Cuboid's volume - the volume of the 2 cuboids' intersection
-}
reduce :: Remnant -> Source -> Target -> Remnant
reduce incomingRemnant source target =
   let
      axisResults = mkAxisResults source target
      noOverlap   = (Nothing, [])
   in
   if noOverlap `elem` axisResults then
      target : incomingRemnant
   else
      let
         (_, outgoingRemnant, _) = foldl accumulateRemnantCandidates (target, incomingRemnant, 0) axisResults
      in
      outgoingRemnant

{- | Accumulate remnant candidates while shrinking target for next axis resize calculation -}
accumulateRemnantCandidates :: (Target, Remnant, Int) -> AxisResult -> (Target, Remnant, Int)
accumulateRemnantCandidates (target, remnant, axisOffset) axisResult@(Just overlap, remainder) =
   createCommon overlap $ foldl prependPiece remnant remainder
   where
      createCommon :: TrgSeg -> Remnant -> (Target, Remnant, Int)
      createCommon overlap' newRemnant =
         ( createPiece overlap'
         , newRemnant
         , axisOffset + 1
         )

      {- | Return a torn-off piece of the original cuboid -}
      prependPiece :: Remnant -> TrgSeg -> Remnant
      prependPiece remnant' segment =
         (createPiece segment) : remnant'

      createPiece :: TrgSeg -> Target
      createPiece segment =
         let
            Target incoming = target
         in
            (Target $ take axisOffset incoming <> [segment] <> drop (axisOffset+1) incoming)