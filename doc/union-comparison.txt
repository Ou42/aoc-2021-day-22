union of first 10 cuboids from AoC 2021 Day 22
blender:    vol = 547647.0766 mm^3
my solveA:  vol = 547647
my solveB WIP:
            vol = 552507
  where:
    > vol $ map snd ndg
    > d <- readFile i3          -- i3.txt = first 10 power steps (aka cuboids)
    > as = allSteps d           -- [('+',[(-32,18),(-49,-2),(-43,3)]), ... ]
    > ndg = newDiffGrps as
                                -- newDiffGrps recursively splits cuboids
                                -- ... taking the difference of 2 at a time
                                -- [('+',[(-22,27),(-46,-2),(-12,37)]), ... ]

-----
552507 - 547647 = 4860
-----

> map (vol . (:[]) . snd) ndg
[112500,24192,3024,3384,46436,408,13464,1848,1156,1700,49500,6992,1134,3078,1650,9126,3575,13662,6003,11286,6050,11880,285,5244,342,4968,990,2340,1656,2640,315,68,57,2052,10127,3380,9568,15,1120,456,1519,520,637,108,676,588,3072,2688,1664,384,1456,420,768,2448,576,1872,416,2340,312,360,144,720,1056,3936,1872,86,318,10176,96,288,160,2720,5270,4794,550,3689,987,9400,105750]

-----

> solveA $ unlines $ take 2 $ lines d
231540
> vol $ map snd $ newDiffGrps $ take 2 as
231540

> fa i = solveA $ unlines $ take i $ lines d
> fb i = vol $ map snd $ newDiffGrps $ take i as

> map (\i -> fa i == fb i) [1..10]
[True,True,True,True,True,True,False,False,False,False]

> fa 6 == fb 6 -- True      > fa 6 -- 429183    > fa 7 -- 477877
> fa 7 == fb 7 -- False     > fb 6 -- 429183    > fb 7 -- 480397

> fb 7 - fa 7  -- 2520

==============================

> d <- readFile i3
> as = allSteps d
> sb i = newDiffGrps $ take i as
> sb6 = sb 6

> sb6
[('+',[(-15,21),(0,9),(-35,-28)]), ... ]

> sb6 !! 0
('+',[(-15,21),(0,9),(-35,-28)])
> head ((init (tails sb6)) !! 0)
('+',[(-15,21),(0,9),(-35,-28)])

*Main Data.List> zipWith (==) sb6 $ map (head) $ init $ tails sb6
[True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True]

*Main Data.List> map (\(hPwrStep:tPwrSteps) -> iFree hPwrStep tPwrSteps) $ init $ tails sb6
[True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True]

> cu7 = last $ take 7 as
> sb7temp = sb6 ++ [cu7]

> iF7 = map (\(hPwrStep:tPwrSteps) -> iFree hPwrStep tPwrSteps) $ init $ tails sb7temp
*Main Data.List> iF7
[False,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,True]

======

2 BIG refactors of newDiffGrps! OK OK one tiny one HUGE refactor
tiny refactor:
  . got rid of nested helper funcs
  . got rid of the nested where
  . got rid of sending in tail & head as args
  . got rid of storing psDone. jsut prepend it to the list and recurse!
  . got rid of the (h:t) destructuring, but then put it back in later
HUGE refactor
  . got rid of nested go function
  . reimplemented (h:t) destructuring
  . pushed the (h:t) to the function invocation(?) w/ the '@' feature

*** AND *** I *** BROKE IT FURTHER!!! ***

| FIXED "breakaged" introduced during refactoring:
|   else newDiffGrps (diff psA psRest) ++ psRest
| should be:
|   else newDiffGrps (diff psA psRest ++ psRest)
+----------------------------------------------------------


> d <- readFile i3
> as = allSteps d
> sa i = unlines $ take i $ lines d
> sb i = newDiffGrps $ take i as
> vb i = vol $ map snd $ sb i

> map (solveA . sa) [1..10]
> map vb [1..10]

            1       2       3       4       5       6
solveA      115056  231540  321769  376667  402927  429183
"slvB" (vb) 115056  231540  321769  376667  402927  429183

solvers diverge on Power Step 7 ...
            7       8       9       10
solveA      477877  505133  529947  547647
"slvB" (vb) 480397  507653  532467  552507

> map (\(h:t) -> iFree h t) $ (init $ tails sb6)
[True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True]


=====

> ld = lines d
> sa2 cu0 cu1 = solveA $ unlines $ [ld !! cu0] ++ [ld !! cu1]
> sb2 cu0 cu1 = vol $ map snd $ newDiffGrps intersects $ [(allSteps d) !! cu0] ++ [(allSteps d) !! cu1]

> pairs = [ (a,b) | a <-[0..9], b <-[0..9], a /= b]
> map (\(cuA,cuB) -> (sa2 cuA cuB) == (sb2 cuA cuB)) pairs

> map (\(cuA,cuB) -> (sa2 cuA cuB) == (sb2 cuA cuB)) pairs
[True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,True]

> filter (\(cuA,cuB) -> (sa2 cuA cuB) /= (sb2 cuA cuB)) pairs
[(1,6),(4,3),(6,0),(8,9),(9,7)]

> sa2 1 6   214704
> sb2 1 6   235494

> newDiffGrps intersects $ [(allSteps d) !! 1] ++ [(allSteps d) !! 6]
[('+',[(-15,35),(-31,16),(-9,43)]),('+',[(3,49),(-29,15),(-45,4)])]

-- THE BUG IS: cubA's Y's are both OUTSIDE/SURROUNDING cubB's Y's

===> and, FIXED:

vol $ map snd $ newDiffGrps intersects3 $ allSteps d
547647

This EQUALS solveA's result!

======

stack ghci
> :l day-22.hs
> d <- readFile inputTest
> as = allSteps d
> concatMap (\(f,s) -> [f,s]) $ concatMap snd $ take 11 as
[-20,26,-36,17,-47,7,-20,33,-21,23,-26,28,-22,28,-29,23,-38,16,-46,7,-6,46,-50,-1,-49,1,-3,46,-24,28,2,47,-22,22,-23,27,-27,23,-28,26,-21,29,-39,5,-6,47,-3,44,-30,21,-8,43,-13,34,-22,26,-27,20,-29,19,-48,-32,26,41,-47,-37]
> nums = concatMap (\(f,s) -> [f,s]) $ concatMap snd $ take 11 as

> any (>50) nums
False
> any (<(-50)) nums
False

So, it's not a [-50..50] "Part A" rule issue!

====

*Day22 Data.List> d <- readFile i3
*Day22 Data.List> as = allSteps d
*Day22 Data.List> sas = map snd as
*Day22 Data.List> pairs l = [(x,y) | (x:ys) <- tails l, y <- ys]
*Day22 Data.List> psas = pairs sas

*Day22 Data.List> psas !! 0
([(-32,18),(-49,-2),(-43,3)],[(-15,35),(-31,16),(-9,43)])
*Day22 Data.List> map (\(a,b) -> intersectUsingSets a b) psas
[True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True]
*Day22 Data.List> ius = map (\(a,b) -> intersectUsingSets a b) psas

*Day22 Data.List> map (\(a,b) -> difference intersects3 a b) pas
[[('+',[(-32,-16),(-49,-2),(-43,3)]),('+',[(-15,18),(-49,-32),(-43,3)]),('+',[(-15,18),(-31,-2),(-43,-10)])],[('+',[(-32,18),(-49,-2),(-43,3)])],[('+',[(9,18),(-49,-2),(-43,3)]),('+',[(-32,8),(-49,-19),(-43,3)]),('+',[(-32,8),(-18,-2),(-43,-35)])],[('+',[(-32,-16),(-49,-2),(-43,3)]),('+',[(-15,18),(-49,-42),(-43,3)]),('+',[(-15,18),(-41,-2),(-43,-36)])],[('+',[(-32,18),(-49,-2),(-43,3)])],[('+',[(-32,2),(-49,-2),(-43,3)]),('+',[(3,18),(-49,-30),(-43,3)])],[('+',[(9,18),(-49,-2),(-43,3)]),('+',[(-32,8),(-49,-30),(-43,3)]),('+',[(-32,8),(-29,-2),(-1,3)])],[('+',[(-32,-23),(-49,-2),(-43,3)]),('+',[(-22,18),(-49,-47),(-43,3)]),('+',[(-22,18),(-46,-2),(-43,-13)])],[('+',[(-32,-20),(-49,-2),(-43,3)]),('+',[(-19,18),(-49,-6),(-43,3)]),('+',[(-19,18),(-5,-2),(1,3)])],[('+',[(24,35),(-31,16),(-9,43)]),('+',[(-15,23),(-31,1),(-9,43)]),('+',[(-15,23),(2,16),(14,43)])],[('+',[(9,35),(-31,16),(-9,43)]),('+',[(-15,8),(-31,-19),(-9,43)]),('+',[(-15,8),(-18,16),(18,43)])],[('+',[(32,35),(-31,16),(-9,43)]),('+',[(-15,31),(10,16),(-9,43)]),('+',[(-15,31),(-31,9),(20,43)])],[('+',[(22,35),(-31,16),(-9,43)]),('+',[(-15,21),(-31,-1),(-9,43)]),('+',[(-15,21),(0,16),(28,43)])],[('+',[(-15,2),(-31,16),(-9,43)]),('+',[(3,35),(-31,-30),(-9,43)]),('+',[(3,35),(16,16),(-9,43)]),('+',[(3,35),(-31,16),(5,43)])],[('+',[(9,35),(-31,16),(-9,43)]),('+',[(-15,8),(-31,-30),(-9,43)]),('+',[(-15,8),(-29,16),(-1,43)])],[('+',[(28,35),(-31,16),(-9,43)]),('+',[(-15,27),(-1,16),(-9,43)]),('+',[(-15,27),(-31,-2),(38,43)])],[('+',[(26,35),(-31,16),(-9,43)]),('+',[(-15,25),(-31,-6),(-9,43)]),('+',[(-15,25),(-5,16),(1,43)])],[('+',[(9,23),(2,47),(-35,13)]),('+',[(-22,8),(28,47),(-35,13)]),('+',[(-22,8),(2,27),(-35,-35)])],[('+',[(-22,-16),(2,47),(-35,13)]),('+',[(-15,23),(10,47),(-35,13)])],[('+',[(22,23),(2,47),(-35,13)]),('+',[(-22,21),(47,47),(-35,13)]),('+',[(-22,21),(2,46),(-35,-28)])],[('+',[(-22,2),(2,47),(-35,13)]),('+',[(3,23),(16,47),(-35,13)]),('+',[(3,23),(2,15),(5,13)])],[('+',[(9,23),(2,47),(-35,13)]),('+',[(-22,8),(23,47),(-35,13)]),('+',[(-22,8),(2,22),(-1,13)])],[('+',[(-22,23),(2,47),(-35,13)])],[('+',[(-22,-20),(2,47),(-35,13)]),('+',[(-19,23),(42,47),(-35,13)]),('+',[(-19,23),(2,41),(1,13)])],[('+',[(-45,-16),(-18,27),(-34,17)]),('+',[(-15,8),(10,27),(-34,17)])],[('+',[(-45,-29),(-18,27),(-34,17)]),('+',[(-28,8),(-18,-1),(-34,17)]),('+',[(-28,8),(0,27),(-34,-28)])],[('+',[(-45,2),(-18,27),(-34,17)]),('+',[(3,8),(16,27),(-34,17)]),('+',[(3,8),(-18,15),(5,17)])],[('+',[(-45,-42),(-18,27),(-34,17)]),('+',[(-41,8),(23,27),(-34,17)]),('+',[(-41,8),(-18,22),(-1,17)])],[('+',[(-45,-23),(-18,27),(-34,17)]),('+',[(-22,8),(-1,27),(-34,17)]),('+',[(-22,8),(-18,-2),(-34,-13)])],[('+',[(-45,-20),(-18,27),(-34,17)]),('+',[(-19,8),(-18,-6),(-34,17)]),('+',[(-19,8),(-5,27),(1,17)])],[('+',[(22,31),(-41,9),(-35,19)]),('+',[(-15,21),(-41,-1),(-35,19)]),('+',[(-15,21),(0,9),(-35,-28)])],[('+',[(-15,2),(-41,9),(-35,19)]),('+',[(3,31),(-41,-30),(-35,19)]),('+',[(3,31),(-29,9),(5,19)])],[('+',[(9,31),(-41,9),(-35,19)]),('+',[(-15,8),(-41,-30),(-35,19)]),('+',[(-15,8),(-29,9),(-1,19)])],[('+',[(28,31),(-41,9),(-35,19)]),('+',[(-15,27),(-1,9),(-35,19)]),('+',[(-15,27),(-41,-2),(-35,-13)])],[('+',[(26,31),(-41,9),(-35,19)]),('+',[(-15,25),(-41,-6),(-35,19)]),('+',[(-15,25),(-5,9),(1,19)])],[('+',[(-28,2),(0,46),(-27,27)]),('+',[(3,21),(16,46),(-27,27)]),('+',[(3,21),(0,15),(5,27)])],[('+',[(9,21),(0,46),(-27,27)]),('+',[(-28,8),(23,46),(-27,27)]),('+',[(-28,8),(0,22),(-1,27)])],[('+',[(-28,21),(0,46),(-27,27)])],[('+',[(-28,-20),(0,46),(-27,27)]),('+',[(-19,21),(42,46),(-27,27)]),('+',[(-19,21),(0,41),(1,27)])],[('+',[(9,49),(-29,15),(-45,4)]),('+',[(3,8),(-29,15),(-1,4)])],[('+',[(28,49),(-29,15),(-45,4)]),('+',[(3,27),(-1,15),(-45,4)]),('+',[(3,27),(-29,-2),(-45,-13)])],[('+',[(26,49),(-29,15),(-45,4)]),('+',[(3,25),(-29,-6),(-45,4)]),('+',[(3,25),(-5,15),(1,4)])],[('+',[(-41,-23),(-29,22),(-48,-2)]),('+',[(-22,8),(-1,22),(-48,-2)]),('+',[(-22,8),(-29,-2),(-48,-13)])],[('+',[(-41,-20),(-29,22),(-48,-2)]),('+',[(-19,8),(-29,-6),(-48,-2)])],[('+',[(-22,-20),(-46,-2),(-12,37)]),('+',[(26,27),(-46,-2),(-12,37)]),('+',[(-22,27),(-46,-6),(-12,37)]),('+',[(-22,27),(-5,-2),(1,37)])]]
*Day22 Data.List> diff = map (\(a,b) -> difference intersects3 a b) pas

*Day22 Data.List> :t intersects3
intersects3
  :: (Eq a1, Enum a1) => (a2, [(a1, a1)]) -> (a3, [(a1, a1)]) -> Bool
*Day22 Data.List> map (\(a,b) -> intersects3 a b) pas
[True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,True,True,True]
*Day22 Data.List> inter3 = map (\(a,b) -> intersects3 a b) pas

> ius == inter3
True

*Day22 Data.List> d <- readFile inputReal
*Day22 Data.List> as = allSteps d
*Day22 Data.List> pas = pairs as
*Day22 Data.List> sas = map snd as
*Day22 Data.List> psas = pairs sas
*Day22 Data.List> ius = map (\(a,b) -> intersectUsingSets a b) psas
*Day22 Data.List> inter3 = map (\(a,b) -> intersects3 a b) pas
*Day22 Data.List> ius == inter3
True -- after quite a few minutes! < an hour

length ius == 87990

=====

> S.difference (S.fromList [1..10]) (S.fromList [2..11])
fromList [1] -- note: doesn't include 11

> S.splitRoot $ S.difference (S.fromList [2..11]) (S.fromList [5..7])
[fromList [2,3,4],fromList [8],fromList [9,10,11]]

====

> import Day22
> import qualified Data.Set as S

*Day22 S> d <- readFile i3
*Day22 S> as = allSteps d
*Day22 S> sas = map snd as
*Day22 S> [a,b] = take 2 $ sas
*Day22 S> diffUsingSets a b
[[(-32,-16),(-49,-2),(-43,3)],[(-15,18),(-49,-32),(-43,3)],[(-15,18),(-31,-2),(-43,-10)]]
*Day22 S> a
[(-32,18),(-49,-2),(-43,3)]
*Day22 S> b
[(-15,35),(-31,16),(-9,43)]
*Day22 S> :t difference
difference
  :: (Enum a1, Ord a1, Num a1) =>
     ((a2, [Rng a1]) -> (a3, [Rng a1]) -> Bool)
     -> (a2, [Rng a1]) -> (a3, [Rng a1]) -> [(a2, [Rng a1])]
*Day22 S> [a2,b2] = take 2 $ as
*Day22 S> difference intersects3 a2 b2
[('+',[(-32,-16),(-49,-2),(-43,3)]),('+',[(-15,18),(-49,-32),(-43,3)]),('+',[(-15,18),(-31,-2),(-43,-10)])]
*Day22 S> map snd $ difference intersects3 a2 b2
[[(-32,-16),(-49,-2),(-43,3)],[(-15,18),(-49,-32),(-43,3)],[(-15,18),(-31,-2),(-43,-10)]]

=====

*Day22 S Data.List> pairs l = [(x,y) | (x:ys) <- tails l, y <- ys]
*Day22 S Data.List> length as
10
*Day22 S Data.List> pas = pairs as
*Day22 S Data.List> psas = pairs sas
*Day22 S Data.List> length pas
45
*Day22 S Data.List> dus = map (\(a,b) -> diffUsingSets a b) psas
*Day22 S Data.List> odiff = map (\(a,b) -> difference intersects3 a b) pas

====

*Day22 S Data.List> vol $ concatMap (\(a,b) -> diffUsingSets a b) $ psas
3765974
*Day22 S Data.List> odiff = map (\(a,b) -> difference intersects3 a b) pas
*Day22 S Data.List> :t odiff
odiff :: [[(Char, [Rng Int])]]
*Day22 S Data.List> odiff = concatMap (\(a,b) -> difference intersects3 a b) pas
*Day22 S Data.List> :t odiff
odiff :: [(Char, [Rng Int])]
*Day22 S Data.List> vol $ map snd odiff
4243871
*Day22 S Data.List> solveA d
547647

-- + =================================================================== +
-- |  but the other 2 were using pas and psas which are made up pairs!!  |
-- + =================================================================== +
