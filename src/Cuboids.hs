module Cuboids where

initialCuboids :: [ Cuboid ]
initialCuboids = [] -- TODO

{- | NonOverlappingRestartCuboids: TODO
-}
newtype NonOverlappingRestartCuboids = NonOverlappingRestartCuboids [ Remnants ]

{- | remnants are the accumulation of applying
   | a Cuboid and an Action against the following
   | Cuboids
-}
newtype Remnants = Remnants [ Remnant ]

{- | A remnant is a List of non-overlapping Cuboids
   | generated by performing a sum or difference function
   | upon 2 Cuboids.
-}
newtype Remnant = Remnant [ Cuboid ]

{- | Action: TODO
-}
data Action = Operation
  { combine :: Cuboid -> Cuboid -> [Cuboid]
  , source  :: Cuboid
  , target  :: Cuboid
  }

{- | return the first Cuboid and the remnants
   | of the second Cuboid
-}
sum :: Cuboid -> Cuboid -> [ Cuboid ]
sum source target = [] -- TODO

{- | return the remnant of subtracting the first
   | Cuboid from the second.
-}
difference :: Cuboid -> Cuboid -> [ Cuboid ]
difference source target = [] -- TODO

data Cuboid = Cuboid
  { x :: Segment
  , y :: Segment
  , z :: Segment
  }

newtype Segment = Segment (Int, Int) -- fst <= snd

