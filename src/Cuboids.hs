module Cuboids where

{- | The actions parsed from the "restart" file provided by the Day-22 exercise.
-}
newtype InitialCuboids = InitialCuboids [ Action ]

{- | The accumulation of applying
   | an `Action` to all combinations of cuboid pairs
   | in the `InitialCuboids`.
-}
newtype Remnants = Remnants [ Remnant ]

{- | A `Cuboid` list of non-overlapping cuboids
   | generated by performing an `Action`
   | upon 2 Cuboids.
-}
newtype Remnant = Remnant [ Cuboid ]

{- | The information parsed from each line in the Day-22 exercise input file
   |
   | Properties
   |
   | 1. `combine` is the function selected by the '+' (apply `sum`) or '-' (`difference`).
   | 2. The `Action` containing the `source` must always precede the `target`'s `Action` in the `InitialCuboids`.
-}
data Action = Action
  { combine :: Cuboid -> Cuboid -> Remnant
  , source  :: Cuboid
  , target  :: Cuboid
  }

{- | return the first Cuboid and the remnants
   | of the second Cuboid
-}
sum :: Cuboid -> Cuboid -> [ Cuboid ]
sum source target = [] -- TODO

{- | return the remnant of subtracting the first
   | Cuboid from the second.
-}
difference :: Cuboid -> Cuboid -> [ Cuboid ]
difference source target = [] -- TODO

data Cuboid = Cuboid
  { x :: Segment
  , y :: Segment
  , z :: Segment
  }

newtype Segment = Segment (Int, Int) -- fst <= snd

