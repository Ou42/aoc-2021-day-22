-- {-# LANGUAGE NamedFieldPuns #-}

module Remnant where

import Cuboid (Source(..), Target(..))
import Segment ( AxisResult(..)
               , Segment(..)
               , SrcSeg(..)
               , TrgSeg(..)
               , compareSegments
               )

{- | A `Cuboid` list of non-intersecting cuboids
   | generated by recursively recursively performing a `RebootStep`
   | upon all the cuboids.
-}
-- ISSUE: 'Remnant' is not good enough name.  Should be called something
--        akin to 'NonIntersectingCuboidsAccumulatingRepository'
--        i.e. the acronym 'nicar'. Or I'd go with the more active
--        'RepositoryAccumulatingNonIntersectingCuboids' or 'ranic' which
--        is Polish for hurt, injure, lacerate, or wound.  Maintainers Beware!
type Remnant = [ Target ]

type AxisResults = [AxisResult]

mkAxisResults :: Source -> Target -> AxisResults
mkAxisResults (Source ss) (Target ts) = zipWith compareSegments ss ts

emptyRemnant :: Remnant
emptyRemnant = []

reduceRemnantUsingSource :: Remnant -> Source -> Remnant
reduceRemnantUsingSource previousRemnant source =
   foldl prepareReduce emptyRemnant previousRemnant -- NOTE: each Source starts a new remnant
   where
      prepareReduce :: Remnant -> Target -> Remnant
      prepareReduce targetRemnant target =
         moveWhatsNotSourceIntoTheRemnant targetRemnant source target

{- | If there are any adjacent targets resulting from decomposing
   | the source against the current target, then add them to the
   | remnant
   |
   | Properties:
   |
   | 1. The combined volumes of the remnant == 2nd Cuboid's volume - the volume of the 2 cuboids' intersection
-}
moveWhatsNotSourceIntoTheRemnant :: Remnant -> Source -> Target -> Remnant
moveWhatsNotSourceIntoTheRemnant incomingRemnant source target =
   let
      axisResults = mkAxisResults source target
   in
   if NoOverlap `elem` axisResults then
      target : incomingRemnant
   else
      let
         (_, outgoingRemnant, _) = foldl accumulateRemnantCandidates (target, incomingRemnant, 0) axisResults
      in
      outgoingRemnant

{- | Accumulate remnant candidates while shrinking target for next axis resize calculation -}
accumulateRemnantCandidates :: (Target, Remnant, Int) -> AxisResult -> (Target, Remnant, Int)
accumulateRemnantCandidates acc@(target, remnant, axisOffset) axisResult =
   case axisResult of
      TargetSwallowedBySource -> (target, remnant, axisOffset + 1)
      Intersects (Just overlapSeg) decomposedSegments ->
         ( createPiece overlapSeg
         , foldl
            (\incomingRemnant decomposedSegment -> createPiece decomposedSegment : incomingRemnant)
               remnant
                  decomposedSegments
         , axisOffset + 1
         )
         where
            -- ISSUE: Duplicated in CalculatePartA
            createPiece :: TrgSeg -> Target
            createPiece segment =
               let
                  Target incoming = target
               in
               Target $ take axisOffset incoming <> [segment] <> drop (axisOffset+1) incoming
